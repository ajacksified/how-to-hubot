{
  "name": "hubot",
  "version": "2.4.8",
  "author": {
    "name": "hubot"
  },
  "keywords": [
    "github",
    "hubot",
    "campfire",
    "bot"
  ],
  "description": "A simple helpful Robot for your Company",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/github/hubot/raw/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/github/hubot.git"
  },
  "dependencies": {
    "coffee-script": "~> 1.6.1",
    "optparse": "1.0.3",
    "scoped-http-client": "0.9.7",
    "log": "1.3.0",
    "connect": "2.3.4",
    "connect_router": "1.8.6"
  },
  "engines": {
    "node": ">= 0.8.x",
    "npm": "1.1.x"
  },
  "main": "./index",
  "bin": {
    "hubot": "./bin/hubot"
  },
  "readme": "# Hubot\n\nThis is a version of GitHub's Campfire bot, hubot. He's pretty cool.\n\n**You'll probably never have to hack on this repo directly.**\n\nInstead this repo provides a library that's distributed by `npm` that you\nsimply require in your project. Follow the instructions below and get your own\nhubot ready to deploy.\n\n## Getting your own\n\nMake sure you have [node.js][nodejs] and [npm][npmjs] (npm comes with node v0.6.3+) installed.\n\nDownload the [latest version of hubot][hubot-latest].\n\nThen follow the instructions in the [README][readme] in the extracted `hubot/src/templates`\ndirectory. The `templates` directory is an example runnable hubot.\n\n[nodejs]: http://nodejs.org\n[npmjs]: http://npmjs.org\n[hubot-latest]: https://github.com/github/hubot/archive/master.zip\n[readme]: https://github.com/github/hubot/blob/master/src/templates/README.md\n\n## Adapters\n\nAdapters are the interface to the service you want your hubot to run on. This\ncan be something like Campfire or IRC. There are a number of third party\nadapters that the community have contributed. Check the\n[hubot wiki][hubot-wiki] for the available ones and how to create your own.\n\nPlease submit issues and pull requests for third party adapters to the adapter\nrepo, not this repo (unless it's the Campfire or Shell adapter).\n\n[hubot-wiki]: https://github.com/github/hubot/wiki\n\n## hubot-scripts\n\nHubot ships with a number of default scripts, but there's a growing number of\nextras in the [hubot-scripts][hubot-scripts] repository. `hubot-scripts` is a\nway to share scripts with the entire community.\n\nCheck out the [README][hubot-scripts-readme] for more help on installing\nindividual scripts.\n\n[hubot-scripts]: https://github.com/github/hubot-scripts\n[hubot-scripts-readme]: https://github.com/github/hubot-scripts#readme\n\n## external-scripts\n\nThis functionality allows users to enable scripts from `npm` packages which\ndon't have to be included in the `hubot-scripts` repository.\n\nTo enable to functionality you can follow the following steps.\n\n1. Add the packages as dependencies into your `package.json`\n2. `npm install` to make sure those packages are installed\n\nTo enable third-party scripts that you've added you will need to add the package\nname as a double quoted string to the `external-scripts.json` file for your\nhubot.\n\n### Creating a script package\n\nCreating a script package for hubot is very simple. Start by creating a normal\n`npm` package. Make sure you add a main file for the entry point (e.g.\n`index.js` or `index.coffee`).\n\nIn this entry point file you're going to have to export a function that hubot\nwill use to load the scripts in your package. Below is a simple example for\nloading each script in a `./scripts` directory in your package.\n\n```coffeescript\nFs   = require 'fs'\nPath = require 'path'\n\nmodule.exports = (robot) ->\n  path = Path.resolve __dirname, 'scripts'\n  Fs.exists path, (exists) ->\n    if exists\n      robot.loadFile path, file for file in Fs.readdirSync(path)\n```\n\nAfter you've built your `npm` package you can publish it to [npmjs][npmjs].\n\n## HTTP Listener\n\nHubot has a HTTP listener which listens on the port specified by the `PORT`\nenvironment variable. If PORT is not specified, the default port will be 8080.\n\nYou can specify routes to listen on in your scripts by using the `router`\nproperty on `robot`.\n\n```coffeescript\nmodule.exports = (robot) ->\n  robot.router.get \"/hubot/version\", (req, res) ->\n    res.end robot.version\n```\n\nThere are functions for GET, POST, PUT and DELETE, which all take a route and\ncallback function that accepts a request and a response.\n\nIn addition, if you set `CONNECT_STATIC`, the HTTP listener will serve static\nfiles from this directory.\n\n## Events System\n\nHubot has also an node.js [EventEmitter][event-emitter] attached. It can be used for data exchange between scripts.\n\n```coffeescript\n# src/scripts/github-commits.coffee\nmodule.exports = (robot) ->\n  robot.router.post \"/hubot/gh-commits\", (req, res) ->\n  \t#code goes here\n    robot.emit \"commit\", {\n        user    : {}, #hubot user object\n        repo    : 'https://github.com/github/hubot',\n        hash  : '2e1951c089bd865839328592ff673d2f08153643'\n    }\n```\n```coffeescript\n# src/scripts/heroku.coffee\nmodule.exports = (robot) ->\n  robot.on \"commit\", (commit) ->\n    robot.send commit.user, \"Will now deploy #{commit.hash} from #{commit.repo}!\"\n    #deploy code goes here\n```\n\nIf you'll provide an event, it's very recommended to include a hubot user object in data. In case of other reacting scripts want to respond to chat.\n\n[event-emitter]: http://nodejs.org/api/events.html#events_class_events_eventemitter \n\n## Testing hubot locally\n\nInstall all of the required dependencies by running `npm install`.\n\nIt's easy to test scripts locally with an interactive shell:\n\n    % export PATH=\"node_modules/.bin:$PATH\"\n    % bin/hubot\n\n... and to run unit tests:\n\n    % make test\n\n",
  "readmeFilename": "README.md",
  "_id": "hubot@2.4.8",
  "_from": "hubot@>=2.4.8"
}
